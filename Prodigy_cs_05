import tkinter as tk
from tkinter import scrolledtext, messagebox
from scapy.all import sniff
import threading


class PacketSniffer:
    def _init_(self, master):
        self.master = master
        self.master.title("Packet Sniffer")

        self.is_sniffing = False

        # Create Start and Stop buttons
        self.start_button = tk.Button(master, text="Start Sniffing", command=self.start_sniffing)
        self.start_button.pack(pady=10)

        self.stop_button = tk.Button(master, text="Stop Sniffing", command=self.stop_sniffing, state=tk.DISABLED)
        self.stop_button.pack(pady=10)

        # Create a scrolled text area for displaying logs
        self.log_text = scrolledtext.ScrolledText(master, width=100, height=30)
        self.log_text.pack(pady=10)

    def packet_callback(self, packet):
        """Callback function to process and display packets."""
        ip_layer = packet.getlayer('IP')
        if ip_layer:
            src_ip = ip_layer.src
            dest_ip = ip_layer.dst
            protocol = ip_layer.proto
            payload = str(packet.payload)[:50]  # Limit payload size for display

            # Append packet information to the log
            log_entry = f"Source: {src_ip}, Destination: {dest_ip}, Protocol: {protocol}, Payload: {payload}\n"
            self.log_text.insert(tk.END, log_entry)
            self.log_text.yview(tk.END)  # Auto-scroll to the latest entry

    def start_sniffing(self):
        """Start capturing packets."""
        self.is_sniffing = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)  # Clear previous logs

        # Start the packet sniffing in a new thread
        threading.Thread(target=self.sniff_packets).start()

    def stop_sniffing(self):
        """Stop capturing packets."""
        self.is_sniffing = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)

    def sniff_packets(self):
        """Capture packets and process them."""
        try:
            sniff(prn=self.packet_callback, store=0)
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {str(e)}")
            self.stop_sniffing()


if _name_ == "_main_":
    root = tk.Tk()
    packet_sniffer = PacketSniffer(root)
    root.mainloop()
